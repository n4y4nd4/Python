# -*- coding: utf-8 -*-
"""nayanda_robers_DR2_AT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19MJa4AMD8jTTJP9ly4Bd00gWSs0fiwKg

Faça um programa em Python que peça para o usuário dois valores numéricos em ponto flutuante e uma operação matemática (+, -, *, /, // ou %). A partir destas informações execute a operação desejada com os valores e apresente o resultado no formato apresentado abaixo:
Atenção! Trate corretamente o caso da divisão por zero!
'primeiro_valor' 'operacao' 'segundo_valor' = 'resultado'
Ex.: 1 + 2 = 3
"""

valor1 = float(input("Entre com o primeiro valor: "))
valor2 = float(input("Entre com o segundo valor: "))
operacao = input("Escolha uma operação (+, -, *, /, // ou %): ")

def calculo():
  if operacao == '+':
    return valor1 + valor2

  if operacao == '-':
    return valor1 - valor2

  if operacao == '*':
    return valor1 * valor2

  if operacao == '/':
    if valor2 != 0:
      return valor1/valor2
    else:
      return print("Não é permitido divisão por zero")

  if operacao == '//':
    if valor2 != 0:
      return valor1//valor2
    else:
      return print("Não é permitido divisão por zero")

  if operacao == '%':
    if valor2 != 0:
      return valor1%valor2
    else:
      return print("Não é permitido divisão por zero")

  else:
    print("operação inválida!!")

print(f"{valor1} {operacao} {valor2 } = {calculo()}")

"""Uma empresa decidiu dar um aumento de salário aos seus colaboradores e precisa de um programa para calcular os reajustes de forma correta.
Faça um programa que recebe o salário de um colaborador e o reajuste segundo o seguinte critério, baseado no salário atual:
Salários até R$1500,00 (incluindo): aumento de 20%;
Salários entre R$1500,00 e R$2000,00 (incluindo): aumento de 15%; Salários entre R$2000,00 e R$2500,00 (incluindo): aumento de 10%;
Salários acima de R$2500,00: aumento de 5%.
Após o aumento ser calculado, informe na tela, de forma clara e organizada:
O salário antes do reajuste;
O percentual de aumento aplicado;
O valor do aumento;
O novo salário, após o aumento.
"""

salario = int(input("Digite seu salário atual: "))

if salario <= 1500:
  valor_do_aumento = (20/100)*salario
  percentual = '20%'
  novo_salario = salario + valor_do_aumento

elif salario > 1500 and salario <=2000:
  valor_do_aumento = (15/100)*salario
  percentual = '15%'
  novo_salario = salario + valor_do_aumento

elif salario >2000 and salario <= 2500:
  valor_do_aumento = (10/100)*salario
  percentual = '10%'
  novo_salario = salario + valor_do_aumento

else:
  valor_do_aumento = (5/100)*salario
  percentual = '5%'
  novo_salario = salario + valor_do_aumento

print(f"O salário antes do reajuste: {salario}; \nO percentual de aumento aplicado: {percentual};\nO valor do aumento:{valor_do_aumento};\nO novo salário, após o aumento: {novo_salario}.")

"""Faça uma lista com os 10 primeiros múltiplos positivos de 3 (maiores ou iguais a 3), utilizando a estrutura de repetição WHILE. Em seguida, use um laço FOR para imprimir a tabuada de 3 usando os números da lista criada anteriormente."""

lista = []
numero = 1

while len(lista) < 10:
  if numero % 3 == 0:
    lista.append(numero)
  numero += 1

print(f"Lista de múltiplos: {lista} \n")


print("Tabuada:")
for i in lista:
  resultado = i * 3
  print(f"3 X {i} = {resultado}")

"""Faça um programa de implemente o jogo de Craps. Funciona da seguinte forma:
O jogador lança um par de dados, obtendo um valor entre 2 e 12.
Se, na primeira jogada, tirar 7 ou 11, isso é chamado de "natural", e ganha.
Se tirar 2, 3 ou 12 na primeira jogada, isto é chamado de "craps", e perde.
Se, na primeira jogada, tirar 4, 5, 6, 8, 9 ou 10, este é seu "Ponto".
O objetivo agora é continuar jogando os dados até tirar este número novamente. No entanto, o jogo estará perdido se tirar um 7 antes de tirar o Ponto novamente.

Implemente a jogada de dados com uma função que possa funcionar para jogar qualquer quantidade de dados e usar dados de qualquer quantidade de faces, porém com parâmetro padrão de 6 faces. A função deve retornar o valor da soma total tirada nos dados. Estude e utilize a biblioteca “random” para fazer esta função. Apresente a condição final de jogo.
"""

import random

def dados():
    dado1 = random.randint(1, 6)
    dado2 = random.randint(1, 6)
    return dado1 + dado2

rodada = 1

while True:

  soma_dados = dados()


  if rodada == 1:
    if (soma_dados == 2) or (soma_dados == 3) or (soma_dados == 12):
      print(f"Craps, you lose! \n vc tirou: {soma_dados} na primeira jogada")
      break
    elif (soma_dados == 7) or (soma_dados == 11):
      print(f"Natural, you won! \n vc tirou: {soma_dados} na primeira jogada")
      break
    else:
      ponto = soma_dados
      print(f"Seu ponto é: {ponto}. vc continuará jogando até tira-lo novamente")
      rodada += 1

  else:
    if soma_dados == 7:
      print(f"You lose! vc tirou 7 antes de tirar ponto novamente.")
      break
    else:
      if soma_dados == ponto:
        print(f"YOU WON. vc tirou {ponto} novamente.")
        break
      else:
        rodada += 1

"""Um palíndromo é uma sequência de caracteres cuja leitura é idêntica se feita da direita para esquerda ou vice−versa. Por exemplo: “OSSO” e “OVO” são palíndromos.
Em textos mais complexos os espaços e pontuação são ignorados. A frase “SUBI NO ONIBUS” é o exemplo de uma frase palíndroma onde os espaços e caracteres acentuados foram ignorados. Faça um programa que leia uma sequência de caracteres, apresente−a na tela, em suas formas natural e palíndroma, e diga se é um palíndromo ou não.
"""

frase = input("Escreva uma frase: ")
frase_invertida = frase[::-1]

if frase.replace(" ", "") == frase_invertida.replace(" ", ""):
 print(f"a frase '{frase}' é um palindromo \nfrase original: '{frase}', frase invertida: '{frase_invertida}'")
else:
  print(f"a frase '{frase}' não é um palindromo \nfrase original: '{frase}', frase invertida: '{frase_invertida}'")

"""Faça um programa que leia um número indeterminado de valores, correspondentes a notas entre 0 e 10 (inteiros), encerrando a entrada de dados quando for informado um valor igual a “-1” (que não deve ser armazenado). Após esta entrada de dados, faça:
Mostre a quantidade de notas que foram lidas;
Exiba todas as notas na ordem em que foram informadas, uma ao lado da outra;
Exiba todas as notas na ordem inversa à que foram informadas, uma abaixo da outra;
Calcule e mostre a soma das notas;
Calcule e mostre a média das notas;
Calcule e mostre a quantidade de notas acima da média calculada;
Calcule e mostre a quantidade de notas abaixo de sete.
"""

count = 0
count_abaixo_sete = 0
lista = []

while True:
  nota = int(input("Entre com notas de 0 a 10 (ou -1 para encerrar): "))

  if nota != -1:
    count += 1
    lista.append(nota)
    lista_inversa = lista[::-1]
    soma = sum(lista)

    if nota < 7:
      count_abaixo_sete += 1
  else:
    break

media = soma/(len(lista))
acima_media = [nota for nota in lista if nota > media]

def imprimirLegal(lista_inversa):
  for i in lista_inversa:
    print(i)


print(f"\nQuantidade de notas que foram lidas: {count};\n ")
print(f"Exiba todas as notas na ordem em que foram informadas, uma ao lado da outra: {lista};\n")
print(f"Exiba todas as notas na ordem inversa à que foram informadas, uma abaixo da outra: ")
imprimirLegal(lista_inversa)
print(f"\nSoma das notas: {soma}; \n")
print(f"Média das notas {media};\n")
print(f"Quantidade de notas acima da média calculada: {len(acima_media)};\n")
print(f"Quantidade de notas abaixo de sete: {count_abaixo_sete}.")

"""Um número elevado à 3ª potência é chamado de cubo. Faça uma lista dos primeiros 10 cubos (ou seja, o cubo de cada inteiro de 1 a 10), utilizando, obrigatoriamente, o recurso de “list comprehension” e use um laço FOR para imprimir os números em sua lista."""

cubo = [x**3 for x in range(1,11)]
print(f"cubos de 1 a 10: {cubo}")